name    = Data-Migrate
author  = Stuart R. Jefferys <srjefferys@gmail.com>
license = Apache_2_0
copyright_holder = Stuart R. Jefferys
copyright_year   = 2015

; default/plugins.ini
;=====================

;      Distributions are build by dzil from a folder of code with this dist.ini
; file included. The folder of code is essentially an unzipped distribution
; and this dist.ini file provides dzil with instructions and data for building
; the distribution. Dzil is a DEVELOPER tool. Users install the distribution
; without using dzil, and this dist.ini file will not be included in that
; distributed distribution.
;
;
;
;      The development workflow for this module uses semantic versioning, where
; the next version is only fixed at release time based on the kinds of changes
; made. Modules are versioned like #.#.#. Breaking, additive, and bug-fix
; changes increment the first, second, or third version number, respectively
; (whichever is larger).
;      Prior to release, the new version number is based on the planned
; changes, but that is not fixed until after release. First and second version
; numbers only go up sequentially, but backported changes and bug-fixes can
; cause new releases from previous versions. This semantic versioining defines
; the intended scope of a release. Bugs can alway cause even minor patches to
; be breaking changes, but a new patch level change should fix that. Once a
; breaking change is introduced, no new additive releases should occur.
;      Category groups in the Changes file are used to automatically determine
; the version. The format for the Changes file must be strictly followed. Do
; not edit previous releases in the Changes file. See the
; [NextVersion::Semantic] plugin below for details of the groupings.

;     This module is set up to support all work in the local git repository,
; interacting with the remote manually only when absolutely needed.
;
;     dzil new Some::Module
; Create a module managed by Dist::Zilla. Can add -p <profile_name> after new.
;     cd Some/Module
;     dzil build
;     dzil test
;     dzil release
; You now have a starter module, relased and published to github. Interacting
; with this module after creation is the same as any other code change. Do one
; of
;     git
;     vi TODO
;

;     master - Integration branch. Develop in topic branches off of
; master. If integration is tough/complex/spans multiple topic branches,
; branch a new "integration" topic branch and integrate into that, then merge
; back into develop. Toipc branches can be pushed manually at any time to a
; public repository for sharing. The master branch should always be working
; code. When master is clean and represents an easy to describe product it can
; be released. Releases are only ever made from master, but not every master
; commit need be released.
;     release - The release branch represents the unzipped module
; as built. It is independent of any templates and automation. This has a
; separate git root from master and should have a clean history that only
; contains relased modules in a sigle main sequence. This is a way to share
; module source that builds, tests, and installs with make and does not require
; Dist::Zilla and dzil.
;     #.#.# and #.#.#-release - Backport branches created only when
; explicitly needed to fix previous releases and a user has compelling reason
; not to upgrade.


; BUILD, (@basic), core
;      Set the core build method. This module uses ExtUtils::MakeMaker,
; 'dzil build' generates a Makefile.PL. Alternately, could use [ModuleBuilder]
[MakeMaker]

; BUILD, @basic, core
;      Selects files and directories for inclusion in the distribution.
; Including dot files to get the config files needed for tools like perltidy,
; perlcritic, and tidyall (must be avaialble in distro when running tests,
; even author tests, as tests run in build and then extracted distro).
; Probably don't want symlinked directories followed for inclusion by default.
; Symlinked files are always copied and included.
;      Can exclude files/directories by name or by reg-exp. These
; "exclude_filename=" and "exclude_match=" values can appear multiple times.
; The [PruneCruft] plugin drops a lot of stuff from what is collected at this
; step (See below)
[GatherDir]
include_dotfiles = 1
; follow_symlinks  = 0   ; Default
exclude_filename = .build
exclude_filename = .build
; exclude_match =

; BUILD, @basic, core
;     Out of what was selected by [GatherDir], drop a bunch of stuff that is
; commonly found in the project directory, but doesn't need to wind up in the
; distribution. Files to keep can be specified here as an "except" entry
; (multiple are allowed).
;     By default, this plugin drops the following files:
; <dist_name>-*,  .*,  *.o,  *.bs,  MYMETA.yml,  MYMETA.json, pm_to_blib,
; blib,  _Inline,  Build,  Makefile, *[c].xs
[PruneCruft]
except = .gitignore
except = .perltidyrc
except = .perlcriticrc
except = .perlcriticrc_test

; BUILD, @basic, META.yml
;     Create the META.yml file used by CPAN.
[MetaYAML]
; filename = META.yml ; Default
; version  = 1.4      ; Default

[MetaJSON]
; filename = META.json   ; Default
; version = 2            ; Defualt

; BUILD, github, META.yml, META.json
;     Lookup Github data and add it to META.yml and Meta.json
; [GitHub::Meta]

; BUILD, @basic, LICENSE
;      Create the license file named in the config file. Can't modify or change
; that here, just generates the named file.
[License]

; BUILD, @basic, MANIFEST, MANIFEST.SKIP
;     Specify the file listing stuff NOT to include (copy) when creating the
; distribution. Usually called "MANIFEST.SKIP". May not have one - most files
; normally listed in this file will be dropped by [PruneCruft]
[ManifestSkip]
; skipfile = MANIFEST.SKIP   ; Default

[Git::Contributors]

; BUILD, pod
;     Generate much of the needed boilerplate using weaver.ini file. Pod will
; be collected and then merged at end of document. Where colleced from, pod is
; commented out (keeps line numbers the same). Where Pod is collected post any
; code, it will be removed when merged as no effect on line numbers there.
[PodWeaver]
    replacer = replace_with_comment
    post_code_replacer = replace_with_nothing

; BUILD, @basic, MANIFEST
;     Creates a MANIFEST file for the distribution. This should be run late in
; the dzil build process to ensure no additional changes occur in directory
; contents or files present.
[Manifest]

; BUILD, Changes, versioning
;      Parse the Changes file to get the previous version. Initial version will
; default to 0.0.1.
[PreviousVersion::Changelog]
; filename=Changes     ; Default

; BUILD, versioning, code
;      Replace '# VERSION' line in modules with the current version when
; copying into the distro.
[OurPkgVersion]

; BUILD, RELASE, Changes, versioning.
;     On build, modifies the distro copy of the Changes file at build time by
; replacing {{$NEXT}} with a version and date/time stamp. Formatting codes for
; the version and date/time stamp should work as described in
; https://metacpan.org/pod/Dist::Zilla::Plugin::NextRelease
; but they don't seem to.
;     On release, rotates the working Changes file by replacing {{$NEXT}} with
; the build date/time timestamp and add a new {{$NEXT}} section at the top.
[NextRelease]
format = %v %{yyyy-MM-dd}d
; format = %-9v %{yyyy-MM-dd HH:mm:ss VVVV}d ; Not really the default...
; filename = Changes    ; Default
; update_filename =     ; Default is same as filename
; time_zone = local     ; Default
; user_stash = %User    ; Default

; BUILD, perlTidy
;    Run perlTidy on source.
[PerlTidy]

; BUILD, README.md, README.HtmlInBuild
;    Autobuild readme's from pod
[ ReadmeAnyFromPod / HtmlInBuild ]
[ ReadmeAnyFromPod / MarkdownInBuild ]

; INSTALL, @basic, bin/
;     Specify the directory whose contents are installed as executables.
[ExecDir]
; dir = bin ; Default

; INSTALL, @basic, share/
;      Specify the directory containing (read-only) data for use with the
; File::ShareDir module at run-time
[ShareDir]
; dir = share ; Default

; RELEASE
;     Run release (and author) tests before doing a release. Abort release if
; any tests fail.
[CheckExtraTests]

; RELEASE, @basic
;      Confirm release, default is NO. If you don't want to require a manual
; confirmation, comment out this plugin.
[ConfirmRelease]

; RELEASE, Changes, versioning
;      Parse the tags in the change log to get next version. The first version
; number is incremented if there is a major group with a change listed, then if
; not the second version number is incremented if there is a minor change, or
; finally the third group is incremented. Releases without changes are not
; allowed. Versions are specified as #.###.###. More than 999 minor or revision
; increments at the same level should not be released, this automatically
; rotates the next higher version element.
[NextVersion::Semantic]
major = MAJOR, API CHANGE, BREAKING CHANGE
minor = MINOR, ENHANCEMENTS, FEATURE, UNGROUPED
revision = REVISION, BUG FIXES, DOCUMENTATION

; BUILD, RELEASE, Changes, dist.ini, scm-git, test
;     Checks if any file is uncommited, other than those allowed to be dirty.
; On build, if build_warnings is set, warns about uncommited files.
; On release, uncommited files causes release to abort. The Changes and dist.ini
; files are allowed to be dirty as they will be autocommited by [Git::Commit]
; to do the release.
[Git::Check]
allow_dirty = Changes    ; Default
allow_dirty = dist.ini   ; Default
build_warnings = 1
; allow_dirty_match =      ; Default
; changelog = Changes      ; Default
; untracked_files = die    ; Default ("die" | "warn" | "ignore")

; RELEASE, scm-git, test
;      Verify on the correct branch before releasing. Will need to be changed
; before releasing (a bug-fix) from a versioned branch.
[Git::CheckFor::CorrectBranch]
; release_branch = master  ; Default

; RELEASE, scm-git, test
;     Verify there are no unresolved merge conflict markers in the gathered
; files.
[Git::CheckFor::MergeConflicts]

; RELEASE, Changes, dist.ini, scm-git
;      Auto-commit the Changes and the dist.ini file for a release. The commit
; message will be the current changes section, as specified using formats from
; https://metacpan.org/pod/Dist::Zilla::Role::Git::StringFormatter.
;      Can specify a differnt name for the Changes file, commit other locally
; modified files (dirty) files, include new files to add and commit, and modify
; the commit_msg, including specifying the time zone.
[Git::Commit]
; changelog = Changes    ; Default
; allow_dirty = Changes  ; Default
; allow_dirty = dist.ini ; Default
; allow_dirty_match =    ; Default
; add_files_in =         ; Default
commit_msg = Auto-commit upon release of v%v%n%n%c

; RELEASE, scm-git
;     Commits a copy of the build (exploded module) under a release branch.
; Use %b to name a different release branch target with the current branch in
; its name. This commit will have the previous release branch commit and
; current master branch commit as its parents.
[Git::CommitBuild]
branch =       ; No commit on build
message =      ; No commit on build
release_branch = release
release_message = Auto-commited installable release of %v
multiple_inheritance = 1

; RELEASE, scm-git
;     Tag the release branch
[Git::Tag]
; tag_format  = v%v       ; this is the default
; tag_message = v%v       ; this is the default
branch = release

; RELEASE, target
;     Fake a release. Just logs a message. Can set the releaser (user) metadata
; to allow other plugins that might need that to work
[FakeRelease]
; user = JEFFERYS ; # optional.

[Git::Push]
push_to = origin master
push_to = origin release

; RELEASE, @basic, target
;      Upload the distro to cpan on release. Requires a user name and password
; for your PAUSE account, which can be provided in various ways, most
; conveniently in a ~/.pause config file.
;     NOTE: Commented out as using github as primary release.
; [UploadToCPAN]
